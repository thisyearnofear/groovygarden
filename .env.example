# DegenDancing Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Primary database connection (required)
# For development, you can use a local PostgreSQL or Neon.tech
NEON_CONN_URL=postgresql://username:password@localhost:5432/degendancing

# Alternative: Use different databases for different tables (optional)
# PG_RESOURCE_USERS=postgresql://...
# PG_RESOURCE_CHAINS=postgresql://...

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# JWT Configuration
JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Solar Platform Integration (for user authentication)
ROUTER_BASE_URL=https://your-solar-router-url.com
OPENROUTER_API_KEY=your-openrouter-api-key-if-using-openrouter

# Refresh token settings
REFRESH_TOKEN_COOKIE_NAME=refresh_token

# =============================================================================
# AI SERVICE CONFIGURATION
# =============================================================================

# Cerebras API (primary AI provider)
CEREBRAS_API_KEY=your-cerebras-api-key-here

# Alternative: OpenRouter API (fallback)
# OPENROUTER_API_KEY=your-openrouter-api-key

# =============================================================================
# MEDIA STORAGE CONFIGURATION
# =============================================================================

# AWS S3 Configuration (for video/image storage)
AWS_REGION=us-east-1
AWS_BUCKET_NAME=your-dance-videos-bucket
AWS_S3_KEY=your-aws-access-key-id
AWS_S3_SECRET=your-aws-secret-access-key

# Alternative: Solar Media Storage
SOLAR_ORGANIZATION_ID=your-solar-org-id
SOLAR_PROJECT_ID=your-solar-project-id

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Environment settings
ENV=development  # Options: development, sandbox, production

# Frontend URLs
FRONTEND_URL=http://localhost:5173
API_BASE_URL=http://localhost:8000

# Sandbox URLs (for development)
SANDBOX_FRONTEND_URL=http://localhost:5173
SANDBOX_BACKEND_URL=http://localhost:8000

# Production domain
PUBLIC_DOMAIN=https://your-production-domain.com

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================

# SEO and social media
PRERENDER_TOKEN=your-prerender-io-token

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Logging level
LOG_LEVEL=INFO

# Debug mode
DEBUG=true

# =============================================================================
# REQUIRED FOR BASIC FUNCTIONALITY
# =============================================================================
# Minimum required variables for the app to start:
# - NEON_CONN_URL (or database connection)
# - CEREBRAS_API_KEY (for AI features)
# - JWT_SECRET_KEY (for authentication)
# - ROUTER_BASE_URL (for Solar integration)</content>
</xai:function_call">### Environment Configuration Created âœ…

I've created a comprehensive `.env.example` file that documents all the environment variables needed for DegenDancing.

**ðŸ”‘ Critical Variables (must set):**
- `NEON_CONN_URL` - Database connection
- `CEREBRAS_API_KEY` - For AI features  
- `JWT_SECRET_KEY` - Authentication security
- `ROUTER_BASE_URL` - Solar platform integration

**ðŸ“‹ Configuration Areas:**
- Database connections
- Authentication & security  
- AI service (Cerebras/OpenRouter)
- Media storage (AWS S3/Solar)
- Application settings
- External services

Now let's test the database setup. Would you like me to:

1. **Run the database setup script** to see what happens (it will show us exactly what's missing)
2. **First check if you have any existing environment variables** set up
3. **Create a basic local development configuration** to get started

What would you prefer? The database script will give us clear feedback about what's configured vs. what's missing. 

Let me know how you'd like to proceed! ðŸŽ¯</content>
</xai:function_call name="todo_write">
<parameter name="todos">[{"id":"phase1_database_setup","content":"Phase 1.1: Database setup and migrations - create initialization scripts, schema setup","status":"completed","priority":"high"}]
