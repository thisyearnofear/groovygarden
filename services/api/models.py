# Auto-generated by Lumenary
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal, Annotated, Tuple, Set, Any

from datetime import datetime, date, time, timedelta
from uuid import UUID
import uuid

class TokenExchangeRequest(BaseModel):
    client_id: str
    grant_type: str
    code: Optional[str] = None
    code_verifier: Optional[str] = None

class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int = 3600

class TokenValidationRequest(BaseModel):
    token: str
    
class LogoutResponse(BaseModel):
    success: bool = True

# Import user-defined models that we need for input/response models
from core.dance_chains import DanceChain
from core.chain_moves import ChainMove
from core.user_profiles import UserProfile
from core.votes import Vote
from core.follows import Follow

GetUserProfileOutputSchema = Optional[UserProfile]
CreateUserProfileOutputSchema = UserProfile
UpdateUserProfileOutputSchema = UserProfile
class BodyUserServiceGetPublicUserProfile(BaseModel):
  username: str

GetPublicUserProfileOutputSchema = Optional[UserProfile]
class BodyUserServiceGetUserChains(BaseModel):
  username: str

GetUserChainsOutputSchema = List[DanceChain]
class BodyUserServiceGetUserMoves(BaseModel):
  username: str

GetUserMovesOutputSchema = List[ChainMove]
CreateDanceChainOutputSchema = DanceChain
class BodyChainServiceGetDanceChains(BaseModel):
  category: Optional[str] = None
  limit: int
  offset: int

GetDanceChainsOutputSchema = List[DanceChain]
class BodyChainServiceGetDanceChain(BaseModel):
  chain_id: uuid.UUID

GetDanceChainOutputSchema = Optional[DanceChain]
class BodyChainServiceGetChainMoves(BaseModel):
  chain_id: uuid.UUID

GetChainMovesOutputSchema = List[ChainMove]
AddMoveToChainOutputSchema = ChainMove
class BodyChainServiceSearchChains(BaseModel):
  query: str
  limit: int

SearchChainsOutputSchema = List[DanceChain]
class BodyVotingServiceVoteOnMove(BaseModel):
  move_id: uuid.UUID
  vote_type: str

VoteOnMoveOutputSchema = Vote
class BodyVotingServiceRemoveVote(BaseModel):
  move_id: uuid.UUID

RemoveVoteOutputSchema = bool
class BodyVotingServiceGetUserVoteOnMove(BaseModel):
  move_id: uuid.UUID

GetUserVoteOnMoveOutputSchema = Optional[Vote]
class BodyVotingServiceGetTopMoves(BaseModel):
  limit: int

GetTopMovesOutputSchema = List[ChainMove]
class BodyVotingServiceGetMoveLeaderboardForChain(BaseModel):
  chain_id: uuid.UUID

GetMoveLeaderboardForChainOutputSchema = List[ChainMove]
    