// This file is auto-generated by @hey-api/openapi-ts

import { type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { UserServiceGetUserProfileData, UserServiceGetUserProfileResponse, UserServiceCreateUserProfileData, UserServiceCreateUserProfileResponse, UserServiceCreateUserProfileError, UserServiceUpdateUserProfileData, UserServiceUpdateUserProfileResponse, UserServiceUpdateUserProfileError, UserServiceGetPublicUserProfileData, UserServiceGetPublicUserProfileResponse, UserServiceGetPublicUserProfileError, UserServiceGetUserChainsData, UserServiceGetUserChainsResponse, UserServiceGetUserChainsError, UserServiceGetUserMovesData, UserServiceGetUserMovesResponse, UserServiceGetUserMovesError, ChainServiceCreateDanceChainData, ChainServiceCreateDanceChainResponse, ChainServiceCreateDanceChainError, ChainServiceGetDanceChainsData, ChainServiceGetDanceChainsResponse, ChainServiceGetDanceChainsError, ChainServiceGetDanceChainData, ChainServiceGetDanceChainResponse, ChainServiceGetDanceChainError, ChainServiceGetChainMovesData, ChainServiceGetChainMovesResponse, ChainServiceGetChainMovesError, ChainServiceAddMoveToChainData, ChainServiceAddMoveToChainResponse, ChainServiceAddMoveToChainError, ChainServiceSearchChainsData, ChainServiceSearchChainsResponse, ChainServiceSearchChainsError, VotingServiceVoteOnMoveData, VotingServiceVoteOnMoveResponse, VotingServiceVoteOnMoveError, VotingServiceRemoveVoteData, VotingServiceRemoveVoteResponse, VotingServiceRemoveVoteError, VotingServiceGetUserVoteOnMoveData, VotingServiceGetUserVoteOnMoveResponse, VotingServiceGetUserVoteOnMoveError, VotingServiceGetTopMovesData, VotingServiceGetTopMovesResponse, VotingServiceGetTopMovesError, VotingServiceGetMoveLeaderboardForChainData, VotingServiceGetMoveLeaderboardForChainResponse, VotingServiceGetMoveLeaderboardForChainError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * User Service Get User Profile
 * Get the current user&#39;s profile.
 */
export const userServiceGetUserProfile = <ThrowOnError extends boolean = false>(options?: Options<UserServiceGetUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetUserProfileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user_service/get_user_profile',
        ...options
    });
};

/**
 * User Service Create User Profile
 * Create a user profile for the authenticated user.
 */
export const userServiceCreateUserProfile = <ThrowOnError extends boolean = false>(options: Options<UserServiceCreateUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceCreateUserProfileResponse, UserServiceCreateUserProfileError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user_service/create_user_profile',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * User Service Update User Profile
 * Update the current user&#39;s profile.
 */
export const userServiceUpdateUserProfile = <ThrowOnError extends boolean = false>(options?: Options<UserServiceUpdateUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceUpdateUserProfileResponse, UserServiceUpdateUserProfileError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user_service/update_user_profile',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * User Service Get Public User Profile
 * Get a user&#39;s public profile by username.
 */
export const userServiceGetPublicUserProfile = <ThrowOnError extends boolean = false>(options: Options<UserServiceGetPublicUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetPublicUserProfileResponse, UserServiceGetPublicUserProfileError, ThrowOnError>({
        url: '/api/user_service/get_public_user_profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User Service Get User Chains
 * Get all dance chains created by a specific user.
 */
export const userServiceGetUserChains = <ThrowOnError extends boolean = false>(options: Options<UserServiceGetUserChainsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetUserChainsResponse, UserServiceGetUserChainsError, ThrowOnError>({
        url: '/api/user_service/get_user_chains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User Service Get User Moves
 * Get all moves submitted by a specific user.
 */
export const userServiceGetUserMoves = <ThrowOnError extends boolean = false>(options: Options<UserServiceGetUserMovesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetUserMovesResponse, UserServiceGetUserMovesError, ThrowOnError>({
        url: '/api/user_service/get_user_moves',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chain Service Create Dance Chain
 * Create a new dance chain with the initial move.
 */
export const chainServiceCreateDanceChain = <ThrowOnError extends boolean = false>(options: Options<ChainServiceCreateDanceChainData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChainServiceCreateDanceChainResponse, ChainServiceCreateDanceChainError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/chain_service/create_dance_chain',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Chain Service Get Dance Chains
 * Get dance chains with optional category filter.
 */
export const chainServiceGetDanceChains = <ThrowOnError extends boolean = false>(options: Options<ChainServiceGetDanceChainsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChainServiceGetDanceChainsResponse, ChainServiceGetDanceChainsError, ThrowOnError>({
        url: '/api/chain_service/get_dance_chains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chain Service Get Dance Chain
 * Get a specific dance chain by ID.
 */
export const chainServiceGetDanceChain = <ThrowOnError extends boolean = false>(options: Options<ChainServiceGetDanceChainData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChainServiceGetDanceChainResponse, ChainServiceGetDanceChainError, ThrowOnError>({
        url: '/api/chain_service/get_dance_chain',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chain Service Get Chain Moves
 * Get all moves for a specific chain in order.
 */
export const chainServiceGetChainMoves = <ThrowOnError extends boolean = false>(options: Options<ChainServiceGetChainMovesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChainServiceGetChainMovesResponse, ChainServiceGetChainMovesError, ThrowOnError>({
        url: '/api/chain_service/get_chain_moves',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chain Service Add Move To Chain
 * Add a new move to an existing dance chain.
 */
export const chainServiceAddMoveToChain = <ThrowOnError extends boolean = false>(options: Options<ChainServiceAddMoveToChainData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChainServiceAddMoveToChainResponse, ChainServiceAddMoveToChainError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/chain_service/add_move_to_chain',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Chain Service Search Chains
 * Search for dance chains by title or description.
 */
export const chainServiceSearchChains = <ThrowOnError extends boolean = false>(options: Options<ChainServiceSearchChainsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChainServiceSearchChainsResponse, ChainServiceSearchChainsError, ThrowOnError>({
        url: '/api/chain_service/search_chains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Vote On Move
 * Vote on a specific move. vote_type should be &#39;up&#39; or &#39;down&#39;.
 */
export const votingServiceVoteOnMove = <ThrowOnError extends boolean = false>(options: Options<VotingServiceVoteOnMoveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceVoteOnMoveResponse, VotingServiceVoteOnMoveError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/voting_service/vote_on_move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Remove Vote
 * Remove a user&#39;s vote from a move.
 */
export const votingServiceRemoveVote = <ThrowOnError extends boolean = false>(options: Options<VotingServiceRemoveVoteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceRemoveVoteResponse, VotingServiceRemoveVoteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/voting_service/remove_vote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Get User Vote On Move
 * Get the current user&#39;s vote on a specific move.
 */
export const votingServiceGetUserVoteOnMove = <ThrowOnError extends boolean = false>(options: Options<VotingServiceGetUserVoteOnMoveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceGetUserVoteOnMoveResponse, VotingServiceGetUserVoteOnMoveError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/voting_service/get_user_vote_on_move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Get Top Moves
 * Get the top-voted moves across all chains.
 */
export const votingServiceGetTopMoves = <ThrowOnError extends boolean = false>(options: Options<VotingServiceGetTopMovesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceGetTopMovesResponse, VotingServiceGetTopMovesError, ThrowOnError>({
        url: '/api/voting_service/get_top_moves',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Get Move Leaderboard For Chain
 * Get moves for a specific chain ranked by votes.
 */
export const votingServiceGetMoveLeaderboardForChain = <ThrowOnError extends boolean = false>(options: Options<VotingServiceGetMoveLeaderboardForChainData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceGetMoveLeaderboardForChainResponse, VotingServiceGetMoveLeaderboardForChainError, ThrowOnError>({
        url: '/api/voting_service/get_move_leaderboard_for_chain',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};